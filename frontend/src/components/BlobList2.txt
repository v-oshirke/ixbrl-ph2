import React, { useEffect, useState } from 'react';
import {
  Box,
  Button,
  Card,
  CardContent,
  Checkbox,
  Grid,
  Link,
  List,
  ListItem,
  TextField,
  Typography
} from '@mui/material';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';

const BlobList: React.FC = () => {
  const [blobs, setBlobs] = useState<string[]>([
    'ASDF - Accounts, 2023 - FRS 101(Ireland) - 1_review.xlsx',
    'XYZ.xlsx',
    'XYZ_Limited.html'
  ]);
  const [selectedBlobs, setSelectedBlobs] = useState<string[]>([]);
  const [endDateCurrent, setEndDateCurrent] = useState<Date | null>(null);
  const [durationCurrentFrom, setDurationCurrentFrom] = useState<Date | null>(null);
  const [durationCurrentTo, setDurationCurrentTo] = useState<Date | null>(null);
  const [endDatePrior, setEndDatePrior] = useState<Date | null>(null);
  const [durationPriorFrom, setDurationPriorFrom] = useState<Date | null>(null);
  const [durationPriorTo, setDurationPriorTo] = useState<Date | null>(null);
  const [openingDatePrior, setOpeningDatePrior] = useState<Date | null>(null);

  const handleCheckboxChange = (filename: string) => {
    setSelectedBlobs((prev) =>
      prev.includes(filename)
        ? prev.filter((f) => f !== filename)
        : [...prev, filename]
    );
  };

  const handleUpload = () => {
    // Add logic to upload selected files
    console.log('Uploading:', selectedBlobs);
  };

  return (
    <LocalizationProvider dateAdapter={AdapterDateFns}>
      <Box sx={{ padding: 2 }}>
        <Typography variant="h5" align="center">Blob Viewer</Typography>
        <Box textAlign="center" my={2}>
          <Button variant="contained" color="secondary">REFRESH</Button>
        </Box>

        <Card variant="outlined">
          <CardContent>
            <Typography variant="subtitle1" gutterBottom>Container: Input</Typography>
            <List>
              {blobs.map((blob, idx) => (
                <ListItem key={idx} disablePadding>
                  <Checkbox
                    checked={selectedBlobs.includes(blob)}
                    onChange={() => handleCheckboxChange(blob)}
                  />
                  <Link href={`#`} underline="hover" target="_blank" rel="noopener">
                    {blob}
                  </Link>
                </ListItem>
              ))}
            </List>

            <Grid container spacing={2} mt={2}>
              <Grid item xs={12}>
                <Typography variant="subtitle1">Date Input</Typography>
              </Grid>

              <Grid item xs={12} sm={6}>
                <Typography>End Date for Current Period:</Typography>
                <DatePicker
                  value={endDateCurrent}
                  onChange={setEndDateCurrent}
                  slotProps={{ textField: { fullWidth: true, size: 'small' } }}
                />
              </Grid>

              <Grid item xs={12} sm={6}>
                <Typography>Duration of Current Period:</Typography>
                <Box display="flex" gap={1}>
                  <DatePicker
                    value={durationCurrentFrom}
                    onChange={setDurationCurrentFrom}
                    slotProps={{ textField: { size: 'small' } }}
                  />
                  <Typography>to</Typography>
                  <DatePicker
                    value={durationCurrentTo}
                    onChange={setDurationCurrentTo}
                    slotProps={{ textField: { size: 'small' } }}
                  />
                </Box>
              </Grid>

              <Grid item xs={12} sm={6}>
                <Typography>End Date for Prior Period:</Typography>
                <DatePicker
                  value={endDatePrior}
                  onChange={setEndDatePrior}
                  slotProps={{ textField: { fullWidth: true, size: 'small' } }}
                />
              </Grid>

              <Grid item xs={12} sm={6}>
                <Typography>Duration of Prior Period:</Typography>
                <Box display="flex" gap={1}>
                  <DatePicker
                    value={durationPriorFrom}
                    onChange={setDurationPriorFrom}
                    slotProps={{ textField: { size: 'small' } }}
                  />
                  <Typography>to</Typography>
                  <DatePicker
                    value={durationPriorTo}
                    onChange={setDurationPriorTo}
                    slotProps={{ textField: { size: 'small' } }}
                  />
                </Box>
              </Grid>

              <Grid item xs={12} sm={6}>
                <Typography>Opening Date for Prior Period:</Typography>
                <DatePicker
                  value={openingDatePrior}
                  onChange={setOpeningDatePrior}
                  slotProps={{ textField: { fullWidth: true, size: 'small' } }}
                />
              </Grid>
            </Grid>

            <Box textAlign="right" mt={2}>
              <Button variant="outlined" onClick={handleUpload}>UPLOAD</Button>
            </Box>
          </CardContent>
        </Card>

        <Card variant="outlined" sx={{ marginTop: 3 }}>
          <CardContent>
            <Typography variant="subtitle1">Container: Output</Typography>
            <Typography>No files present</Typography>
            <Box textAlign="right" mt={2}>
              <Button variant="outlined" disabled>DOWNLOAD</Button>
            </Box>
          </CardContent>
        </Card>
      </Box>
    </LocalizationProvider>
  );
};

export default BlobList;
